name: Check and Bump Submodules

on:
  workflow_dispatch: # or change to pull_request / push triggers as needed

permissions:
  contents: write

env:
  CROSS_TOKEN: ${{ secrets.WORKFLOWS }}

jobs:
  check-and-bump-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Echo workflow start
        run: echo "üöÄ Starting submodule bump workflow"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ env.CROSS_TOKEN }}

      - name: Determine current branch
        id: branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"
          echo "branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT

      - name: Echo after checkout
        run: |
          echo "üîé Repository checked out"
          echo "Number of submodules:"
          git config --file .gitmodules --get-regexp path | wc -l

      - name: Bump outdated submodules
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            const branch = process.env.GITHUB_OUTPUT_BRANCH || process.env.GITHUB_REF_NAME;
            console.log(`üîß Working on branch: ${branch}`);

            console.log('üîß Starting submodule inspection');

            const submodules = execSync(
              'git config --file .gitmodules --get-regexp path',
              { encoding: 'utf8' }
            )
              .trim()
              .split('\n')
              .map(line => {
                const [, path] = line.split(' ');
                const name = path.split('/').pop();
                const url = execSync(`git config --file .gitmodules --get submodule.${name}.url`, { encoding: 'utf8' }).trim();
                return { name, path, url };
              });

            console.log(`Found ${submodules.length} submodule(s)`);

            let changed = false;

            for (const sub of submodules) {
              console.log(`Checking submodule ${sub.name} at ${sub.path}`);

              let urlWithToken = sub.url;
              if (sub.url.startsWith('https://')) {
                urlWithToken = sub.url.replace('https://', `https://${process.env.CROSS_TOKEN}@`);
              } else {
                throw new Error(`Unsupported submodule URL: ${sub.url}`);
              }

              const defaultBranch = execSync(
                `git ls-remote --symref ${urlWithToken} HEAD | grep '^ref:' | awk '{print $2}' | sed 's|refs/heads/||'`,
                { encoding: 'utf8' }
              ).trim();

              const latestCommit = execSync(
                `git ls-remote ${urlWithToken} refs/heads/${defaultBranch} | awk '{print $1}'`,
                { encoding: 'utf8' }
              ).trim();

              // Get current commit of submodule
              let currentCommit;
              try {
                currentCommit = execSync(`git -C ${sub.path} rev-parse HEAD`, { encoding: 'utf8' }).trim();
              } catch (e) {
                throw new Error(`Failed to get current commit for submodule ${sub.name}`);
              }

              console.log(`Default branch: ${defaultBranch}`);
              console.log(`Latest commit on ${defaultBranch}: ${latestCommit}`);
              console.log(`Current submodule commit: ${currentCommit}`);

              if (currentCommit !== latestCommit) {
                console.log(`‚ö†Ô∏è  Submodule ${sub.name} is outdated. Updating...`);
                execSync(`git -C ${sub.path} fetch origin ${defaultBranch}`);
                execSync(`git -C ${sub.path} reset --hard ${latestCommit}`);
                execSync(`git add ${sub.path}`);
                changed = true;
              } else {
                console.log(`‚úÖ Submodule ${sub.name} is up-to-date`);
              }
            }

            if (changed) {
              console.log('Committing updated submodules...');
              execSync('git config user.name "github-actions[bot]"');
              execSync('git config user.email "github-actions[bot]@users.noreply.github.com"');
              execSync(`git commit -m "Bump submodules to latest default branch"`);
              execSync(`git push origin ${process.env.GITHUB_REF_NAME}`);
            } else {
              console.log('All submodules are up-to-date, nothing to commit.');
            }

            console.log('üîß Submodule inspection completed');

      - name: Echo workflow end
        if: always()
        run: echo "‚úÖ Submodule bump workflow finished"
